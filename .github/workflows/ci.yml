name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, migrate_mock_framework_to_contract_testing_10162025 ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r server/requirements.txt
        pip install pytest pytest-cov pytest-xdist

    - name: Install contract testing dependencies
      run: |
        pip install typing-extensions  # For Protocol support

    - name: Run contract validation pre-check
      run: |
        python -c "
        try:
            from tests.contracts.firestore import ContractValidator
            from tests.contracts.base import OperationResult, QueryOptions
            from tests.utils.business_rules import BusinessRules
            print('✓ Contract validation components available')
            # Test basic validator functionality
            validator = ContractValidator()
            result = validator.validate_business_rules('auth_check', {'user_id': 'test'})
            print('✓ Contract validator initialized successfully')
        except ImportError as e:
            print(f'✗ Contract validation components missing: {e}')
            exit(1)
        except Exception as e:
            print(f'✗ Contract validator initialization failed: {e}')
            exit(1)
        "

    - name: Run tests with contract validation
      run: |
        pytest tests/ \
          --cov=server/ \
          --cov=src/ \
          --cov-report=xml \
          --cov-report=term-missing \
          --junitxml=test-results.xml \
          -v \
          --tb=short \
          --durations=10

    - name: Validate contract compliance
      run: |
        # Run contract-specific tests and validate contract hooks
        pytest tests/ \
          -k "contract" \
          --tb=short \
          -v \
          -m "contract"

    - name: Generate contract validation report
      run: |
        python -c "
        import json
        import os
        from datetime import datetime

        # Basic contract validation report
        report = {
            'timestamp': datetime.utcnow().isoformat(),
            'branch': '${{ github.ref }}',
            'commit': '${{ github.sha }}',
            'contract_validation': {
                'status': 'passed',
                'components_checked': [
                    'tests.contracts.base',
                    'tests.contracts.firestore',
                    'tests.utils.business_rules',
                    'tests.conftest'
                ],
                'validation_rules': 30  # Updated count for new validator
            }
        }

        with open('contract-report.json', 'w') as f:
            json.dump(report, f, indent=2)

        print('✓ Contract validation report generated')
        "

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          contract-report.json
          htmlcov/

  pre-commit-contract-enforcement:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r server/requirements.txt
        pip install pytest pre-commit freezegun hypothesis
        pip install typing-extensions

    - name: Run pre-commit contract enforcement
      run: |
        python -c "
        import sys
        import os
        import logging
        from datetime import datetime

        logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

        # Import contract components
        try:
            sys.path.insert(0, 'server')
            sys.path.insert(0, 'src')

            from tests.contracts.firestore import ContractValidator, ContractEnforcer
            from tests.contracts.base import OperationResult, QueryOptions
            from tests.utils.business_rules import BusinessRules
            from tests.contracts.mocks import MockFirestoreClient
            logging.info('✓ Contract components imported successfully')
        except ImportError as e:
            logging.error(f'✗ Failed to import contract components: {e}')
            exit(1)

        # Initialize validators
        try:
            validator = ContractValidator()
            enforcer = ContractEnforcer()
            business_rules = BusinessRules()
            mock_client = MockFirestoreClient()
            logging.info('✓ Contract validators initialized')
        except Exception as e:
            logging.error(f'✗ Failed to initialize validators: {e}')
            exit(1)

        violations = []

        # 1) Smoke-run a focused subset of contract tests
        try:
            import subprocess
            result = subprocess.run([
                sys.executable, '-m', 'pytest',
                'tests/contracts/',
                '-k', 'not slow',
                '-v', '--tb=short', '-x'
            ], capture_output=True, text=True, timeout=300)

            if result.returncode != 0:
                violations.append('Contract tests failed (subset)')
        except subprocess.TimeoutExpired:
            violations.append('Contract tests timed out')
        except Exception as e:
            violations.append(f'Failed to run contract tests: {e}')

        # 2) Validate schema creation calls align with validator signature
        try:
            # Provide minimally valid examples per entity type
            test_entities = [
                ('user',     {'username': 'testuser', 'password_hash': 'x'}),
                ('device',   {'device_id': 'dev-1', 'status': 'active'}),
                ('session',  {'session_id': 'sess_1234567890abcdef1234567890abcd', 'user_id': 'user_123456', 'ip_address': '127.0.0.1'})
            ]

            for entity_type, entity in test_entities:
                res = validator.validate_create_operation(entity, entity_type)
                if not res.valid:
                    violations.append(f'Schema validation failed for {entity_type}: {res.violations}')
        except Exception as e:
            violations.append(f'Schema validation error: {e}')

        # 3) Business rules integrity checks (names and params)
        try:
            rules_to_test = [
                ('auth_check',        {'user_id': 'user_123456', 'permissions': ['read']}),
                ('tenant_isolation',  {'tenant_id': 'tenant1', 'resource_tenant_id': 'tenant1'}),
                ('session_policy',    {'user_id': 'user_123456', 'ip_address': '127.0.0.1'})
            ]

            for rule_name, params in rules_to_test:
                result = validator.validate_business_rules(rule_name, params)
                if not result.valid:
                    violations.append(f'Business rule {rule_name} failed: {result.violations}')
        except Exception as e:
            violations.append(f'Business rules validation error: {e}')

        # 4) Mock-production drift smoke check
        try:
            mock_result = mock_client.query('users', {'tenant_id': 'test'})
            if not hasattr(mock_result, 'items') and not isinstance(mock_result, (list, tuple)):
                violations.append('Mock client unexpected result type')
        except Exception as e:
            violations.append(f'Mock validation error: {e}')

        if violations:
            logging.error(f'Pre-commit contract enforcement failed with {len(violations)} violations:')
            for v in violations:
                logging.error(f'  - {v}')
            exit(1)
        else:
            logging.info('✓ Pre-commit contract enforcement passed')
        "

  contract-validation:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install -r server/requirements.txt
        pip install pytest

    - name: Run contract compliance audit
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, 'server')

        # Import and validate all contract components
        try:
            from tests.contracts.base import (
                BaseStoreProtocol, TenantTimestampedStoreProtocol,
                AuditStoreProtocol, UserStoreProtocol
            )
            print('✓ Contract protocols imported successfully')
        except ImportError as e:
            print(f'✗ Failed to import contract protocols: {e}')
            exit(1)

        try:
            from tests.contracts.firestore import ContractValidator, ContractEnforcer
            validator = ContractValidator()
            enforcer = ContractEnforcer(validator)
            print('✓ Contract validators imported successfully')
        except ImportError as e:
            print(f'✗ Failed to import contract validators: {e}')
            exit(1)

        try:
            from tests.utils.business_rules import BusinessRules
            rules = BusinessRules()
            print('✓ Business rules imported successfully')
        except ImportError as e:
            print(f'✗ Failed to import business rules: {e}')
            exit(1)

        # Test basic contract functionality
        try:
            # Test auth validation
            result = rules.auth_check(user_id='test_user_123', session_id='a' * 32)
            assert result['valid'] == True
            print('✓ Auth validation working')

            # Test TTL validation
            ttl_result = rules.ttl_enforce(created_at_ms=1000000000000, ttl_days=30)
            assert ttl_result['valid'] == True
            print('✓ TTL enforcement working')

            # Test contract validation
            test_data = {'user_id': 'test_user_123', 'timestamp_ms': 1000000000000}
            validator.validate_create_operation(test_data, ['user_id', 'timestamp_ms'])
            print('✓ Contract validation working')

        except Exception as e:
            print(f'✗ Contract functionality test failed: {e}')
            exit(1)

        print('✓ All contract validation components working correctly')
        "

    - name: Validate contract migration progress
      run: |
        python -c "
        import os
        import glob

        # Check for contract migration markers
        contract_files = glob.glob('tests/contracts/*.py')
        business_rules_files = glob.glob('tests/utils/business_rules.py')

        print(f'Contract files found: {len(contract_files)}')
        print(f'Business rules files found: {len(business_rules_files)}')

        # Check conftest.py modifications
        with open('tests/conftest.py', 'r') as f:
            conftest_content = f.read()

        if 'ContractEnforcer' in conftest_content and 'BusinessRules' in conftest_content:
            print('✓ conftest.py contract integration detected')
        else:
            print('✗ conftest.py contract integration missing')
            exit(1)

        print('✓ Contract migration progress validated')
        "

  security-audit:
    runs-on: ubuntu-latest
    needs: [test, contract-validation, pre-commit-contract-enforcement]

    steps:
    - uses: actions/checkout@v4

    - name: Run security audit
      run: |
        # Basic security checks for contract-related code
        python -c "
        import ast
        import os

        def check_file_for_security_issues(file_path):
            try:
                with open(file_path, 'r') as f:
                    content = f.read()

                # Check for dangerous patterns in contract code
                dangerous_patterns = [
                    'eval(', 'exec(', '__import__(',
                    'subprocess.', 'os.system', 'os.popen'
                ]

                issues = []
                for pattern in dangerous_patterns:
                    if pattern in content:
                        issues.append(f'Dangerous pattern found: {pattern}')

                # Check for proper error handling in validators
                if 'ContractValidator' in content and 'raise' not in content:
                    issues.append('Contract validator missing error handling')

                return issues

            except Exception as e:
                return [f'Error checking file: {e}']

        # Check contract files
        contract_files = ['tests/contracts/base.py', 'tests/contracts/firestore.py', 'tests/utils/business_rules.py']

        all_issues = []
        for file_path in contract_files:
            if os.path.exists(file_path):
                issues = check_file_for_security_issues(file_path)
                if issues:
                    all_issues.extend([f'{file_path}: {issue}' for issue in issues])
                    print(f'✗ Security issues in {file_path}:')
                    for issue in issues:
                        print(f'  - {issue}')
            else:
                print(f'⚠ File not found: {file_path}')

        if all_issues:
            print(f'Security audit failed with {len(all_issues)} issues')
            exit(1)
        else:
            print('✓ Security audit passed')
        "
